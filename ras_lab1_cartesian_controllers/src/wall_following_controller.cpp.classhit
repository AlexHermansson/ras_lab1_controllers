#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <ras_lab1_msgs/ADConverter.h>

int adc_left;
int adc_right;

class Controller {
	
	double alpha;
	//geometry_msgs::Twist msg;
	
	public:
		
		Controller() {
			alpha = 0.03;
			//msg.linear.x = 0.2;
		}
		
		void setAngularVel(geometry_msgs::Twist &msg) {
			int error = adc_left - adc_right;
			msg.angular.z = int (alpha * error);
			ROS_INFO("Controller w : %d", int (msg.angular.z));
		}
	
};


void ADCallback(const ras_lab1_msgs::ADConverter::ConstPtr& msg) {
	adc_right = msg->ch1;
	adc_left = msg->ch2;
}


int main(int argc, char **argv) 
{
	ros::init(argc, argv, "wall_following_controller");
	ros::NodeHandle nh;
	ros::Rate rate(10);
	
	ros::Publisher twist_pub = nh.advertise<geometry_msgs::Twist>("/motor_controller/twist", 1);
	ros::Subscriber adc_sub = nh.subscribe<ras_lab1_msgs::ADConverter>("/kobuki/adc", 1, ADCallback);
	
	geometry_msgs::Twist twist_msg;
	twist_msg.linear.x = 0.2;
	Controller controller;
	
	while (ros::ok()) {
		ros::spinOnce();
		controller.setAngularVel(twist_msg);
		ROS_INFO("actual w : %d", int (twist_msg.angular.z));
		twist_pub.publish(twist_msg);
	
	}
	

}
